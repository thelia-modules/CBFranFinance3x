<?php
/**
 * This class has been generated by TheliaStudio
 * For more information, see https://github.com/thelia-modules/TheliaStudio
 */

namespace CBFranFinance3x\Controller\Base;

use CBFranFinance3x\CBFranFinance3x;
use Thelia\Controller\Admin\BaseAdminController;
use Thelia\Form\Exception\FormValidationException;
use CBFranFinance3x\Model\Config\CBFranFinance3xConfigValue;

/**
 * Class CBFranFinance3xConfigController
 * @package CBFranFinance3x\Controller\Base
 * @author TheliaStudio
 */
class CBFranFinance3xConfigController extends BaseAdminController
{
    public function defaultAction()
    {
        return $this->render("cbfranfinance3x-configuration");
    }

    public function saveAction()
    {
        $baseForm = $this->createForm("cbfranfinance3x.configuration");

        $errorMessage = null;

        try {
            $form = $this->validateForm($baseForm);
            $data = $form->getData();

            CBFranFinance3x::setConfigValue(CBFranFinance3xConfigValue::AUTHENTICATION_KEY, is_bool($data["authentication_key"]) ? (int) ($data["authentication_key"]) : $data["authentication_key"]);
            CBFranFinance3x::setConfigValue(CBFranFinance3xConfigValue::CUSTOMIZE_CODE, is_bool($data["customize_code"]) ? (int) ($data["customize_code"]) : $data["customize_code"]);
            CBFranFinance3x::setConfigValue(CBFranFinance3xConfigValue::MINIMUM_PRICE, is_bool($data["minimum_price"]) ? (int) ($data["minimum_price"]) : $data["minimum_price"]);
            CBFranFinance3x::setConfigValue(CBFranFinance3xConfigValue::MAXIMUM_PRICE, is_bool($data["maximum_price"]) ? (int) ($data["maximum_price"]) : $data["maximum_price"]);
        } catch (FormValidationException $ex) {
            // Invalid data entered
            $errorMessage = $this->createStandardFormValidationErrorMessage($ex);
        } catch (\Exception $ex) {
            // Any other error
            $errorMessage = $this->getTranslator()->trans('Sorry, an error occurred: %err', ['%err' => $ex->getMessage()], [], CBFranFinance3x::MESSAGE_DOMAIN);
        }

        if (null !== $errorMessage) {
            // Mark the form as with error
            $baseForm->setErrorMessage($errorMessage);

            // Send the form and the error to the parser
            $this->getParserContext()
                ->addForm($baseForm)
                ->setGeneralError($errorMessage)
            ;
        } else {
            $this->getParserContext()
                ->set("success", true)
            ;
        }

        return $this->defaultAction();
    }
}
