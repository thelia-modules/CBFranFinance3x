<?php
/**
 * This class has been generated by TheliaStudio
 * For more information, see https://github.com/thelia-modules/TheliaStudio
 */

namespace CBFranFinance3x\Form\Base;

use CBFranFinance3x\CBFranFinance3x;
use Thelia\Form\BaseForm;
use CBFranFinance3x\Model\Config\CBFranFinance3xConfigValue;
use Symfony\Component\Validator\Constraints\NotBlank;

/**
 * Class CBFranFinance3xConfigForm
 * @package CBFranFinance3x\Form\Base
 * @author TheliaStudio
 */
class CBFranFinance3xConfigForm extends BaseForm
{
    const FORM_NAME = "cbfranfinance3x_config_form";

    /**
     *
     * in this function you add all the fields you need for your Form.
     * Form this you have to call add method on $this->formBuilder attribute :
     *
     * $this->formBuilder->add("name", "text")
     *   ->add("email", "email", array(
     *           "attr" => array(
     *               "class" => "field"
     *           ),
     *           "label" => "email",
     *           "constraints" => array(
     *               new \Symfony\Component\Validator\Constraints\NotBlank()
     *           )
     *       )
     *   )
     *   ->add('age', 'integer');
     *
     * @return null
     */
    protected function buildForm()
    {
        $translationKeys = $this->getTranslationKeys();
        $fieldsIdKeys = $this->getFieldsIdKeys();

        $this->addAuthenticationKeyField($translationKeys, $fieldsIdKeys);
        $this->addCustomizeCodeField($translationKeys, $fieldsIdKeys);
        $this->addMinimumPriceField($translationKeys, $fieldsIdKeys);
        $this->addMaximumPriceField($translationKeys, $fieldsIdKeys);
    }

    protected function addAuthenticationKeyField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder
            ->add("authentication_key", "textarea", array(
                "label" => $this->translator->trans($this->readKey("authentication_key", $translationKeys), [], CBFranFinance3x::MESSAGE_DOMAIN),
                "label_attr" => ["for" => $this->readKey("authentication_key", $fieldsIdKeys)],
                "required" => true,
                "constraints" => array(
                    new NotBlank(),
                ),
                "data" => CBFranFinance3x::getConfigValue(CBFranFinance3xConfigValue::AUTHENTICATION_KEY),
            ))
        ;
    }

    protected function addCustomizeCodeField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder
            ->add("customize_code", "text", array(
                "label" => $this->translator->trans($this->readKey("customize_code", $translationKeys), [], CBFranFinance3x::MESSAGE_DOMAIN),
                "label_attr" => ["for" => $this->readKey("customize_code", $fieldsIdKeys)],
                "required" => false,
                "constraints" => array(
                ),
                "data" => CBFranFinance3x::getConfigValue(CBFranFinance3xConfigValue::CUSTOMIZE_CODE),
            ))
        ;
    }

    protected function addMinimumPriceField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder
            ->add("minimum_price", "integer", array(
                "label" => $this->translator->trans($this->readKey("minimum_price", $translationKeys), [], CBFranFinance3x::MESSAGE_DOMAIN),
                "label_attr" => ["for" => $this->readKey("minimum_price", $fieldsIdKeys)],
                "required" => true,
                "constraints" => array(
                    new NotBlank(),
                ),
                "data" => CBFranFinance3x::getConfigValue(CBFranFinance3xConfigValue::MINIMUM_PRICE),
            ))
        ;
    }

    protected function addMaximumPriceField(array $translationKeys, array $fieldsIdKeys)
    {
        $this->formBuilder
            ->add("maximum_price", "integer", array(
                "label" => $this->translator->trans($this->readKey("maximum_price", $translationKeys), [], CBFranFinance3x::MESSAGE_DOMAIN),
                "label_attr" => ["for" => $this->readKey("maximum_price", $fieldsIdKeys)],
                "required" => true,
                "constraints" => array(
                    new NotBlank(),
                ),
                "data" => CBFranFinance3x::getConfigValue(CBFranFinance3xConfigValue::MAXIMUM_PRICE),
            ))
        ;
    }

    public function getName()
    {
        return static::FORM_NAME;
    }

    public function readKey($key, array $keys, $default = '')
    {
        if (isset($keys[$key])) {
            return $keys[$key];
        }

        return $default;
    }

    public function getTranslationKeys()
    {
        return array();
    }

    public function getFieldsIdKeys()
    {
        return array(
            "authentication_key" => "authentication_key",
            "customize_code" => "customize_code",
            "minimum_price" => "minimum_price",
            "maximum_price" => "maximum_price",
        );
    }
}
